from typing import Optional, Any, Union

class StatsClientBase:
    def pipeline(self) -> None: ...
    def timer(self, stat: str, rate: int = ...): ...
    def timing(self, stat: str, delta: Union[int, float], rate: int = ...) -> None: ...
    def incr(self, stat: str, count: Union[int, float, None] = ..., rate: int = ...) -> None: ...
    def decr(self, stat: str, count: int = ..., rate: int = ...) -> None: ...
    def gauge(self, stat: str, value: Union[int, float], rate: int = ..., delta: bool = ...) -> None: ...
    def set(self, stat: str, value:  Union[int, float], rate: int = ...) -> None: ...

class PipelineBase(StatsClientBase):
    def __init__(self, client: Any) -> None: ...
    def __enter__(self): ...
    def __exit__(self, typ: Any, value: Any, tb: Any) -> None: ...
    def send(self) -> None: ...
    def pipeline(self): ...

class StatsClient(StatsClientBase):
    def __init__(self, host: str = ..., port: int = ..., prefix: Optional[str] = ...,
                 maxudpsize: int = ..., ipv6: bool = ...) -> None: ...
    def pipeline(self): ...

class StreamClientBase(StatsClientBase):
    def connect(self) -> None: ...
    def close(self) -> None: ...
    def reconnect(self) -> None: ...
    def pipeline(self): ...

class TCPStatsClient(StreamClientBase):
    def __init__(self, host: str = ..., port: int = ..., prefix: Optional[Any] = ..., timeout: Optional[Any] = ..., ipv6: bool = ...) -> None: ...
    def connect(self) -> None: ...
